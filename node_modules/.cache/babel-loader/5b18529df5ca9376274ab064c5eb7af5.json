{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport copy from 'fast-copy';\nvar UNRESOLVED_LINK = {}; // unique object to avoid polyfill bloat using Symbol()\n\n/**\n * isLink Function\n * Checks if the object has sys.type \"Link\"\n * @param object\n */\n\nvar isLink = function isLink(object) {\n  return object && object.sys && object.sys.type === 'Link';\n};\n/**\n * Creates a string key for lookup in entityMap\n *\n * @param {*} sys\n * @param {String} sys.type\n * @param {String} sys.id\n * @return {String}\n */\n\n\nvar makeLookupKey = function makeLookupKey(sys) {\n  return sys.type + '!' + sys.id;\n};\n/**\n * getLink Function\n *\n * @param response\n * @param link\n * @return {undefined}\n */\n\n\nvar getLink = function getLink(entityMap, link) {\n  var _link$sys = link.sys,\n      type = _link$sys.linkType,\n      id = _link$sys.id;\n  var lookupKey = makeLookupKey({\n    type: type,\n    id: id\n  });\n  return entityMap.get(lookupKey) || UNRESOLVED_LINK;\n};\n/**\n * cleanUpLinks Function\n * - Removes unresolvable links from Arrays and Objects\n *\n * @param {Object[]|Object} input\n */\n\n\nvar cleanUpLinks = function cleanUpLinks(input) {\n  if (Array.isArray(input)) {\n    return input.filter(function (val) {\n      return val !== UNRESOLVED_LINK;\n    });\n  }\n\n  for (var key in input) {\n    if (input[key] === UNRESOLVED_LINK) {\n      delete input[key];\n    }\n  }\n\n  return input;\n};\n/**\n * walkMutate Function\n * @param input\n * @param predicate\n * @param mutator\n * @return {*}\n */\n\n\nvar walkMutate = function walkMutate(input, predicate, mutator, removeUnresolved) {\n  if (predicate(input)) {\n    return mutator(input);\n  }\n\n  if (input && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {\n    for (var key in input) {\n      if (input.hasOwnProperty(key)) {\n        input[key] = walkMutate(input[key], predicate, mutator, removeUnresolved);\n      }\n    }\n\n    if (removeUnresolved) {\n      input = cleanUpLinks(input);\n    }\n  }\n\n  return input;\n};\n\nvar normalizeLink = function normalizeLink(entityMap, link, removeUnresolved) {\n  var resolvedLink = getLink(entityMap, link);\n\n  if (resolvedLink === UNRESOLVED_LINK) {\n    return removeUnresolved ? resolvedLink : link;\n  }\n\n  return resolvedLink;\n};\n\nvar makeEntryObject = function makeEntryObject(item, itemEntryPoints) {\n  if (!Array.isArray(itemEntryPoints)) {\n    return item;\n  }\n\n  var entryPoints = Object.keys(item).filter(function (ownKey) {\n    return itemEntryPoints.indexOf(ownKey) !== -1;\n  });\n  return entryPoints.reduce(function (entryObj, entryPoint) {\n    entryObj[entryPoint] = item[entryPoint];\n    return entryObj;\n  }, {});\n};\n/**\n * resolveResponse Function\n * Resolves contentful response to normalized form.\n * @param {Object} response Contentful response\n * @param {Object} options\n * @param {Boolean} options.removeUnresolved - Remove unresolved links default:false\n * @param {Array<String>} options.itemEntryPoints - Resolve links only in those item properties\n * @return {Object}\n */\n\n\nvar resolveResponse = function resolveResponse(response, options) {\n  options = options || {};\n\n  if (!response.items) {\n    return [];\n  }\n\n  var responseClone = copy(response);\n  var allIncludes = Object.keys(responseClone.includes || {}).reduce(function (all, type) {\n    return [].concat(_toConsumableArray(all), _toConsumableArray(response.includes[type]));\n  }, []);\n  var allEntries = [].concat(_toConsumableArray(responseClone.items), _toConsumableArray(allIncludes));\n  var entityMap = new Map(allEntries.map(function (entity) {\n    return [makeLookupKey(entity.sys), entity];\n  }));\n  allEntries.forEach(function (item) {\n    var entryObject = makeEntryObject(item, options.itemEntryPoints);\n    Object.assign(item, walkMutate(entryObject, isLink, function (link) {\n      return normalizeLink(entityMap, link, options.removeUnresolved);\n    }, options.removeUnresolved));\n  });\n  return responseClone.items;\n};\n\nexport default resolveResponse;","map":{"version":3,"sources":["/Users/user/Desktop/tech-store/node_modules/contentful-resolve-response/dist/esm/index.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","copy","UNRESOLVED_LINK","isLink","object","sys","type","makeLookupKey","id","getLink","entityMap","link","_link$sys","linkType","lookupKey","get","cleanUpLinks","input","filter","val","key","walkMutate","predicate","mutator","removeUnresolved","hasOwnProperty","normalizeLink","resolvedLink","makeEntryObject","item","itemEntryPoints","entryPoints","Object","keys","ownKey","indexOf","reduce","entryObj","entryPoint","resolveResponse","response","options","items","responseClone","allIncludes","includes","all","concat","allEntries","Map","map","entity","forEach","entryObject","assign"],"mappings":"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","sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport copy from 'fast-copy';\n\nvar UNRESOLVED_LINK = {}; // unique object to avoid polyfill bloat using Symbol()\n\n/**\n * isLink Function\n * Checks if the object has sys.type \"Link\"\n * @param object\n */\nvar isLink = function isLink(object) {\n  return object && object.sys && object.sys.type === 'Link';\n};\n\n/**\n * Creates a string key for lookup in entityMap\n *\n * @param {*} sys\n * @param {String} sys.type\n * @param {String} sys.id\n * @return {String}\n */\nvar makeLookupKey = function makeLookupKey(sys) {\n  return sys.type + '!' + sys.id;\n};\n\n/**\n * getLink Function\n *\n * @param response\n * @param link\n * @return {undefined}\n */\nvar getLink = function getLink(entityMap, link) {\n  var _link$sys = link.sys,\n      type = _link$sys.linkType,\n      id = _link$sys.id;\n\n  var lookupKey = makeLookupKey({ type: type, id: id });\n\n  return entityMap.get(lookupKey) || UNRESOLVED_LINK;\n};\n\n/**\n * cleanUpLinks Function\n * - Removes unresolvable links from Arrays and Objects\n *\n * @param {Object[]|Object} input\n */\nvar cleanUpLinks = function cleanUpLinks(input) {\n  if (Array.isArray(input)) {\n    return input.filter(function (val) {\n      return val !== UNRESOLVED_LINK;\n    });\n  }\n  for (var key in input) {\n    if (input[key] === UNRESOLVED_LINK) {\n      delete input[key];\n    }\n  }\n  return input;\n};\n\n/**\n * walkMutate Function\n * @param input\n * @param predicate\n * @param mutator\n * @return {*}\n */\nvar walkMutate = function walkMutate(input, predicate, mutator, removeUnresolved) {\n  if (predicate(input)) {\n    return mutator(input);\n  }\n\n  if (input && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {\n    for (var key in input) {\n      if (input.hasOwnProperty(key)) {\n        input[key] = walkMutate(input[key], predicate, mutator, removeUnresolved);\n      }\n    }\n    if (removeUnresolved) {\n      input = cleanUpLinks(input);\n    }\n  }\n  return input;\n};\n\nvar normalizeLink = function normalizeLink(entityMap, link, removeUnresolved) {\n  var resolvedLink = getLink(entityMap, link);\n  if (resolvedLink === UNRESOLVED_LINK) {\n    return removeUnresolved ? resolvedLink : link;\n  }\n  return resolvedLink;\n};\n\nvar makeEntryObject = function makeEntryObject(item, itemEntryPoints) {\n  if (!Array.isArray(itemEntryPoints)) {\n    return item;\n  }\n\n  var entryPoints = Object.keys(item).filter(function (ownKey) {\n    return itemEntryPoints.indexOf(ownKey) !== -1;\n  });\n\n  return entryPoints.reduce(function (entryObj, entryPoint) {\n    entryObj[entryPoint] = item[entryPoint];\n    return entryObj;\n  }, {});\n};\n\n/**\n * resolveResponse Function\n * Resolves contentful response to normalized form.\n * @param {Object} response Contentful response\n * @param {Object} options\n * @param {Boolean} options.removeUnresolved - Remove unresolved links default:false\n * @param {Array<String>} options.itemEntryPoints - Resolve links only in those item properties\n * @return {Object}\n */\nvar resolveResponse = function resolveResponse(response, options) {\n  options = options || {};\n  if (!response.items) {\n    return [];\n  }\n  var responseClone = copy(response);\n  var allIncludes = Object.keys(responseClone.includes || {}).reduce(function (all, type) {\n    return [].concat(_toConsumableArray(all), _toConsumableArray(response.includes[type]));\n  }, []);\n\n  var allEntries = [].concat(_toConsumableArray(responseClone.items), _toConsumableArray(allIncludes));\n\n  var entityMap = new Map(allEntries.map(function (entity) {\n    return [makeLookupKey(entity.sys), entity];\n  }));\n\n  allEntries.forEach(function (item) {\n    var entryObject = makeEntryObject(item, options.itemEntryPoints);\n\n    Object.assign(item, walkMutate(entryObject, isLink, function (link) {\n      return normalizeLink(entityMap, link, options.removeUnresolved);\n    }, options.removeUnresolved));\n  });\n\n  return responseClone.items;\n};\n\nexport default resolveResponse;"]},"metadata":{},"sourceType":"module"}